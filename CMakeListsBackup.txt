cmake_minimum_required(VERSION 3.25)

#set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL")
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
option(GROUP_BY_EXPLORER ON)
#set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD 23)
#set(CMAKE_C_STANDARD 99)
#set(CMAKE_CXX_STANDARD 17)
#[[if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 19.12.25835)
#	set(CMAKE_CXX20_STANDARD_COMPILE_OPTION "-std:c++latest")
#	set(CMAKE_CXX20_EXTENSION_COMPILE_OPTION "-std:c++latest")
#endif()]]

#设置编译类型
if("${CMAKE_BUILD_TYPE}" STREQUAL "")
    set(CMAKE_BUILD_TYPE "Release")
endif()
message(STATUS "CMAKE_BUILD_TYPE : ${CMAKE_BUILD_TYPE}")
SET(CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE} CACHE STRING "" FORCE)

#define SOLUTION_DIR
set(SOLUTION_DIR ${CMAKE_CURRENT_SOURCE_DIR}/..)
#define SOLUTION_TOOLS_DIR
set(SOLUTION_TOOLS_DIR ${SOLUTION_DIR}/tools/)
#define PROJECT_RES_DIR
set(PROJECT_RES_DIR ${SOLUTION_DIR}/projects/bridge/res/)

#SET_TARGET_PROPERTIES(core PROPERTIES RUNTIME_OUTPUT_DIRECTORY ../bin)

#set(BINARY__DIR ${SOLUTION_DIR}/build/)

set(VS_Platform "$(Platform)")
set(VS_Configuration "$(Configuration)")
set(SOLUTION_LIBRARY_DIR ${SOLUTION_DIR}/3rdparty/lib/${VS_Platform}/)
set(SOLUTION_LIBRARY_SHARED_DIR ${SOLUTION_DIR}/3rdparty/shared/${VS_Platform}/)
set(SOLUTION_LIBRARY_OPENSSL_DIR ${SOLUTION_DIR}/3rdparty/openssl/${VS_Platform}/lib/)
set(SOLUTION_RUNTIME_OUTPUT_DIRECTORY ${SOLUTION_DIR}/bin/)

#[[if(CMAKE_CL_64)
 set(SOLUTION_LIBRARY_DIR ${SOLUTION_LIBRARY_DIR}/x64/)
else(CMAKE_CL_64)
 set(SOLUTION_LIBRARY_DIR ${SOLUTION_LIBRARY_DIR}/win32/)
endif(CMAKE_CL_64)
if (CMAKE_BUILD_TYPE MATCHES "Release")
 set(SOLUTION_LIBRARY_DIR ${SOLUTION_LIBRARY_DIR}/Release/)
elseif(CMAKE_BUILD_TYPE MATCHES "Debug")
 set(SOLUTION_LIBRARY_DIR ${SOLUTION_LIBRARY_DIR}/Debug/)
endif()]]

add_definitions(-DWINLIB_DISABLE_IMAGEHLP)
add_definitions(-DUNICODE -D_UNICODE)

include_directories(${SOLUTION_DIR}/include/ ${SOLUTION_DIR}/3rdparty/)
link_directories(${SOLUTION_LIBRARY_DIR} ${SOLUTION_LIBRARY_SHARED_DIR} ${SOLUTION_LIBRARY_OPENSSL_DIR})

project(memade)
add_subdirectory(${SOLUTION_DIR}/cmake/projects/bridge/objects/500001/)


